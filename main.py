#–ó–∞–≤–¥–∞–Ω–Ω—è:
#–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç, —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω –Ü–¢ –∫—É—Ä—Å—ñ–≤.
#1. /start - –≤–∏–≤–æ–¥–∏—Ç—å –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è —Ç–∞ –º–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω—É.
#–ö–Ω–æ–ø–∫–∏ Reply: "–ö—É—Ä—Å–∏", "–ö–æ–Ω—Ç–∞–∫—Ç–∏", "–ö–æ—Ä–∑–∏–Ω–∞".
#–ö–£–†–°–ò:
#–°–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –≤ –ø–∞–ø—Ü—ñ courses.
#–ö–æ–∂–µ–Ω –∫—É—Ä—Å - –æ–∫—Ä–µ–º–∏–π –ø–∞–ø–∫–∞ –∑ —Ñ–∞–π–ª–æ–º course.txt —Ç–∞ –∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é.
#–ö–Ω–æ–ø–∫–∏ Inline: "–ö—É–ø–∏—Ç–∏", "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è".
#–ö–û–ù–¢–ê–ö–¢–ò:
#–í–∏–≤–æ–¥–∏—Ç—å—Å—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –º–∞–≥–∞–∑–∏–Ω.
#–ö–Ω–æ–ø–∫–∏ Inline: "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è".
#–ö–û–†–ó–ò–ù–ê:
#–í–∏–≤–æ–¥–∏—Ç—å—Å—è —Å–ø–∏—Å–æ–∫ –∫—É–ø–ª–µ–Ω–∏—Ö –∫—É—Ä—Å—ñ–≤.
#–ö–Ω–æ–ø–∫–∏ Inline: "–û–ø–ª–∞—Ç–∏—Ç–∏", "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è".
#–û–ü–õ–ê–¢–ê:
#–í–∏–≤–æ–¥–∏—Ç—å—Å—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –æ–ø–ª–∞—Ç—É.


#–ö–£–†–°–ò:
    # –í–∏–≤–æ–¥–∏—Ç—å—Å—è —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å—ñ–≤ –∑ –ø–∞–ø–∫–∏ courses —Ç–∞ –∫–Ω–æ–ø–∫–∞–º–∏ 1 - 5. –¥–µ 1 - –ø–µ—Ä—à–∏–π –∫—É—Ä—Å, 2 - –¥—Ä—É–≥–∏–π –∫—É—Ä—Å —ñ —Ç.–¥.
    # –ö–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–∂–∞–≤ –Ω–∞ –Ünline –ö–Ω–æ–ø–∫—É "1" - –≤–∏–≤–æ–¥–∏—Ç—å—Å—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫—É—Ä—Å.
    #–ò–ù–§–û–†–ú–ê–¶–ò–Ø –ü–†–û –ö–£–†–°:
        #–§–æ—Ç–æ –∫—É—Ä—Å—É
        #–ù–∞–∑–≤–∞ –∫—É—Ä—Å—É
        #–û–ø–∏—Å –∫—É—Ä—Å—É
        #–¶—ñ–Ω–∞ –∫—É—Ä—Å—É
        #–∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—Ä–æ–∫—ñ–≤ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å
        #–∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—Ä–æ–∫—ñ–≤ –≤ –∫—É—Ä—Å—ñ
        #–ö–Ω–æ–ø–∫–∏ Inline: –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ(url –Ω–∞ —Å–∞–π—Ç), –ö—É–ø–∏—Ç–∏, –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è.


import logging

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from decouple import config

from utils import get_courses, get_photo

API_TOKEN = config('API_TELEGRAM')

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


# Reply buttons main menu
main_menu_rep = types.ReplyKeyboardMarkup(resize_keyboard=True)
main_menu_rep.add(types.KeyboardButton('üåü–ö—É—Ä—Å–∏'))
main_menu_rep.add(types.KeyboardButton('üì±–ö–æ–Ω—Ç–∞–∫—Ç–∏')) 
main_menu_rep.add(types.KeyboardButton('üõí–ö–æ—Ä–∑–∏–Ω–∞'))

# Inline buttons –ö–£–†–°–ò
inline_kb_courses = types.InlineKeyboardMarkup()
inline_kb_courses.add(types.InlineKeyboardButton('üõí–ö—É–ø–∏—Ç–∏', callback_data='buy'))
inline_kb_courses.add(types.InlineKeyboardButton('‚óÄ–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è', callback_data='back'))

# Inline buttons –ö–û–ù–¢–ê–ö–¢–ò
inline_kb_contacts = types.InlineKeyboardMarkup()
inline_kb_contacts.add(types.InlineKeyboardButton('‚óÄ–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è', callback_data='back'))

# Inline buttons –ö–û–†–ó–ò–ù–ê
inline_kb_basket = types.InlineKeyboardMarkup()
inline_kb_basket.add(types.InlineKeyboardButton('üí≥–û–ø–ª–∞—Ç–∏—Ç–∏', callback_data='pay'))
inline_kb_basket.add(types.InlineKeyboardButton('‚óÄ–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è', callback_data='back'))

# Inline buttons –û–ü–õ–ê–¢–ê
inline_kb_pay = types.InlineKeyboardMarkup()
inline_kb_pay.add(types.InlineKeyboardButton('‚óÄ–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è', callback_data='back'))

#C—á–∏—Ç—É—î–º–æ –∫—É—Ä—Å–∏ –∑ –ø–∞–ø–∫–∏ courses
courses = get_courses()
 
 
# States
class CoursesState(StatesGroup):
    course = State()
    course_info = State()

@dp.message_handler(commands=['start'], state='*')
async def process_start_command(message: types.Message, state: FSMContext):
    await message.reply("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω—É –∫—É—Ä—Å—ñ–≤. –û–±–∏—Ä–∞–π –æ–¥–∏–Ω —ñ–∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –º–µ–Ω—é.", reply_markup=main_menu_rep)
    await state.finish()
    
@dp.message_handler(lambda message: message.text == 'üåü–ö—É—Ä—Å–∏', state='*')
async def process_courses_command(message: types.Message, state: FSMContext):
    
    muckup = types.InlineKeyboardMarkup(row_width=5)
    text = '–û–±–µ—Ä—ñ—Ç—å –∫—É—Ä—Å:\n'
    buttons = []
    for i, course in enumerate(courses):
        print(course)
        name_course = courses.get(course).get('name')
        text += f'{i+1}. {name_course}\n'
        buttons.append(types.InlineKeyboardButton(f'{i+1}', callback_data=course))
    muckup.add(*buttons)
        
    await message.reply(text, reply_markup=muckup)
    await CoursesState.course.set()
    
@dp.callback_query_handler(lambda c: c.data in courses, state=CoursesState.course)
async def process_callback_course(callback_query: types.CallbackQuery, state: FSMContext):
    course = courses.get(callback_query.data)
    
    photo = get_photo(callback_query.data)
    
    name = course.get('name')
    description = course.get('description')
    price = course.get('price')
    lessons_week = course.get('duration')
    lessons = course.get('lessons')
    level = course.get('level')
    url = course.get('url')
    
    buttons = []
    #url
    buttons.append(types.InlineKeyboardButton('üîó–ü–æ—Å–∏–ª–∞–Ω–Ω—è', url=url))
    buttons.append(types.InlineKeyboardButton('üõí–ö—É–ø–∏—Ç–∏', callback_data='buy'))
    buttons.append(types.InlineKeyboardButton('‚óÄ–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è', callback_data='back'))
    inline_kb_courses = types.InlineKeyboardMarkup()
    inline_kb_courses.add(*buttons)
    
    text = f'<b>–ù–∞–∑–≤–∞ –∫—É—Ä—Å—É:</b> {name}\n\n<b>–û–ø–∏—Å –∫—É—Ä—Å—É:</b> {description}\n\n<b>–¶—ñ–Ω–∞ –∫—É—Ä—Å—É:</b> {price} –≥—Ä–Ω.\n<b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å —É—Ä–æ–∫—ñ–≤ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å:</b> {lessons_week}\n<b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å —É—Ä–æ–∫—ñ–≤ –≤ –∫—É—Ä—Å—ñ:</b> {lessons}'
    await bot.send_photo(callback_query.from_user.id, photo, caption=text, reply_markup=inline_kb_courses , parse_mode='HTML')
    await CoursesState.course_info.set()

@dp.callback_query_handler(lambda c: c.data == 'buy', state=CoursesState.course_info)
async def process_callback_buy(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, '–ö—É—Ä—Å –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ—Ä–∑–∏–Ω–∏', reply_markup=inline_kb_basket)
    await state.finish()

    
# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ –ù–ê–ó–ê–î
@dp.callback_query_handler(lambda c: c.data == 'back', state=CoursesState.course_info)
async def process_callback_back(callback_query: types.CallbackQuery, state: FSMContext):
    await process_courses_command(callback_query.message, state)

#–ö–æ–Ω—Ç–∞–∫—Ç–∏
@dp.message_handler(lambda message: message.text == 'üìû–ö–æ–Ω—Ç–∞–∫—Ç–∏', state='*')
async def process_contacts_command(message: types.Message, state: FSMContext):
    await message.reply('–ó–≤\'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏ –∑–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º: 0800 20 8020\n –ê–±–æ –Ω–∞ —Å–∞–π—Ç—ñ: https://dnipro.ithillel.ua/contact', reply_markup=main_menu_rep)
  

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)